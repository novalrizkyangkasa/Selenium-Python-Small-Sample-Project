{"name": "test_registration", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoAlertPresentException: Message: no such alert\n  (Session info: chrome=133.0.6943.127)\nStacktrace:\n0   chromedriver                        0x0000000104caeb58 cxxbridge1$str$ptr + 2724820\n1   chromedriver                        0x0000000104ca71b8 cxxbridge1$str$ptr + 2693684\n2   chromedriver                        0x000000010480d970 cxxbridge1$string$len + 92952\n3   chromedriver                        0x000000010482fd84 cxxbridge1$string$len + 233260\n4   chromedriver                        0x000000010482f724 cxxbridge1$string$len + 231628\n5   chromedriver                        0x0000000104848ba0 cxxbridge1$string$len + 335176\n6   chromedriver                        0x0000000104c77610 cxxbridge1$str$ptr + 2498188\n7   chromedriver                        0x0000000104c7a924 cxxbridge1$str$ptr + 2511264\n8   chromedriver                        0x0000000104c5ccb0 cxxbridge1$str$ptr + 2389292\n9   chromedriver                        0x0000000104c7b1cc cxxbridge1$str$ptr + 2513480\n10  chromedriver                        0x0000000104c4dc98 cxxbridge1$str$ptr + 2327828\n11  chromedriver                        0x0000000104c97880 cxxbridge1$str$ptr + 2629884\n12  chromedriver                        0x0000000104c97a08 cxxbridge1$str$ptr + 2630276\n13  chromedriver                        0x0000000104ca6e2c cxxbridge1$str$ptr + 2692776\n14  libsystem_pthread.dylib             0x0000000190ce02e4 _pthread_start + 136\n15  libsystem_pthread.dylib             0x0000000190cdb0fc thread_start + 8", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"675a93f677d5c086959c0c77d2342da6\")>\n\n    def test_registration(driver):\n        driver.get('https://www.demoblaze.com')\n    \n        # Tunggu hingga URL mengandung kata 'demoblaze'\n        wait = WebDriverWait(driver, 10)  # Waktu tunggu maksimum 10 detik\n        wait.until(EC.url_contains(\"demoblaze\"))\n    \n        regris_button = driver.find_element(By.ID, 'signin2')\n        regris_button.click()\n    \n        driver.find_element(By.ID, 'sign-username').send_keys('squiishyy251226new')\n        time.sleep(2)\n        driver.find_element(By.ID, 'sign-password').send_keys('password123')\n        take_screenshot(driver, \"after_registration\")\n    \n        elementXpath = driver.find_element(By.XPATH, '//*[@id=\"signInModal\"]/div/div/div[3]/button[2]').click()\n    \n        # Menangani alert\n        alert = Alert(driver)  # Membuat objek Alert untuk menangani alert\n>       alert.accept()  # Menerima alert\n\nmaintest.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.pyenv/versions/3.12.6/lib/python3.12/site-packages/selenium/webdriver/common/alert.py:72: in accept\n    self.driver.execute(Command.W3C_ACCEPT_ALERT)\n../../../.pyenv/versions/3.12.6/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x106f85cd0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such alert\",\"message\":\"no such alert\\\\n  (Session info: chrome=133.0.6...000190ce02e4 _pthread_start + 136\\\\n15  libsystem_pthread.dylib             0x0000000190cdb0fc thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoAlertPresentException: Message: no such alert\nE         (Session info: chrome=133.0.6943.127)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104caeb58 cxxbridge1$str$ptr + 2724820\nE       1   chromedriver                        0x0000000104ca71b8 cxxbridge1$str$ptr + 2693684\nE       2   chromedriver                        0x000000010480d970 cxxbridge1$string$len + 92952\nE       3   chromedriver                        0x000000010482fd84 cxxbridge1$string$len + 233260\nE       4   chromedriver                        0x000000010482f724 cxxbridge1$string$len + 231628\nE       5   chromedriver                        0x0000000104848ba0 cxxbridge1$string$len + 335176\nE       6   chromedriver                        0x0000000104c77610 cxxbridge1$str$ptr + 2498188\nE       7   chromedriver                        0x0000000104c7a924 cxxbridge1$str$ptr + 2511264\nE       8   chromedriver                        0x0000000104c5ccb0 cxxbridge1$str$ptr + 2389292\nE       9   chromedriver                        0x0000000104c7b1cc cxxbridge1$str$ptr + 2513480\nE       10  chromedriver                        0x0000000104c4dc98 cxxbridge1$str$ptr + 2327828\nE       11  chromedriver                        0x0000000104c97880 cxxbridge1$str$ptr + 2629884\nE       12  chromedriver                        0x0000000104c97a08 cxxbridge1$str$ptr + 2630276\nE       13  chromedriver                        0x0000000104ca6e2c cxxbridge1$str$ptr + 2692776\nE       14  libsystem_pthread.dylib             0x0000000190ce02e4 _pthread_start + 136\nE       15  libsystem_pthread.dylib             0x0000000190cdb0fc thread_start + 8\n\n../../../.pyenv/versions/3.12.6/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoAlertPresentException"}, "attachments": [{"name": "after_registration", "source": "0d62c6f6-4124-49a9-b95d-26655c52550b-attachment.png", "type": "image/png"}], "start": 1740105658174, "stop": 1740105662702, "uuid": "a55b824f-4135-4fa1-badb-b9a3f0a06206", "historyId": "6225fb59eacac521cce0168fe6d9be09", "testCaseId": "6225fb59eacac521cce0168fe6d9be09", "fullName": "maintest#test_registration", "labels": [{"name": "suite", "value": "maintest"}, {"name": "host", "value": "novalrizkys-MacBook-Air.local"}, {"name": "thread", "value": "38065-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "maintest"}]}