{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: User does not exist.\nMessage: unexpected alert open: {Alert text : User does not exist.}\n  (Session info: chrome=133.0.6943.127)\nStacktrace:\n0   chromedriver                        0x0000000100dfeb58 cxxbridge1$str$ptr + 2724820\n1   chromedriver                        0x0000000100df71b8 cxxbridge1$str$ptr + 2693684\n2   chromedriver                        0x000000010095dafc cxxbridge1$string$len + 93348\n3   chromedriver                        0x00000001009e6408 cxxbridge1$string$len + 652720\n4   chromedriver                        0x0000000100998ba0 cxxbridge1$string$len + 335176\n5   chromedriver                        0x0000000100dc7610 cxxbridge1$str$ptr + 2498188\n6   chromedriver                        0x0000000100dca924 cxxbridge1$str$ptr + 2511264\n7   chromedriver                        0x0000000100daccb0 cxxbridge1$str$ptr + 2389292\n8   chromedriver                        0x0000000100dcb1cc cxxbridge1$str$ptr + 2513480\n9   chromedriver                        0x0000000100d9dc98 cxxbridge1$str$ptr + 2327828\n10  chromedriver                        0x0000000100de7880 cxxbridge1$str$ptr + 2629884\n11  chromedriver                        0x0000000100de7a08 cxxbridge1$str$ptr + 2630276\n12  chromedriver                        0x0000000100df6e2c cxxbridge1$str$ptr + 2692776\n13  libsystem_pthread.dylib             0x0000000190ce02e4 _pthread_start + 136\n14  libsystem_pthread.dylib             0x0000000190cdb0fc thread_start + 8", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c294c0c107fafdbd1fda512410ce3805\")>\n\n    def test_login(driver):\n        driver.get('https://www.demoblaze.com')\n    \n        # Tunggu hingga URL mengandung kata 'demoblaze'\n        wait = WebDriverWait(driver, 10)  # Waktu tunggu maksimum 10 detik\n        wait.until(EC.url_contains(\"demoblaze\"))\n    \n        login_button = driver.find_element(By.ID, 'login2')\n        login_button.click()\n        time.sleep(3)\n    \n        driver.find_element(By.ID, 'loginusername').send_keys('squiishyy251227new')\n        time.sleep(2)\n        driver.find_element(By.ID, 'loginpassword').send_keys('password123')\n    \n        time.sleep(2)\n    \n        elementXpath = driver.find_element(By.XPATH, '//*[@id=\"logInModal\"]/div/div/div[3]/button[2]').click()\n    \n        time.sleep(2)\n>       take_screenshot(driver, \"after_login\")\n\nmaintest.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmaintest.py:24: in take_screenshot\n    driver.get_screenshot_as_file(screenshot_path)\n../../../.pyenv/versions/3.12.6/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:805: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n../../../.pyenv/versions/3.12.6/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:839: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n../../../.pyenv/versions/3.12.6/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:850: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n../../../.pyenv/versions/3.12.6/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1031731a0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"User does not exist.\"},\"error\":\"unexpected alert open\",\"message\":\"...000190ce02e4 _pthread_start + 136\\\\n14  libsystem_pthread.dylib             0x0000000190cdb0fc thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: User does not exist.\nE           Message: unexpected alert open: {Alert text : User does not exist.}\nE             (Session info: chrome=133.0.6943.127)\nE           Stacktrace:\nE           0   chromedriver                        0x0000000100dfeb58 cxxbridge1$str$ptr + 2724820\nE           1   chromedriver                        0x0000000100df71b8 cxxbridge1$str$ptr + 2693684\nE           2   chromedriver                        0x000000010095dafc cxxbridge1$string$len + 93348\nE           3   chromedriver                        0x00000001009e6408 cxxbridge1$string$len + 652720\nE           4   chromedriver                        0x0000000100998ba0 cxxbridge1$string$len + 335176\nE           5   chromedriver                        0x0000000100dc7610 cxxbridge1$str$ptr + 2498188\nE           6   chromedriver                        0x0000000100dca924 cxxbridge1$str$ptr + 2511264\nE           7   chromedriver                        0x0000000100daccb0 cxxbridge1$str$ptr + 2389292\nE           8   chromedriver                        0x0000000100dcb1cc cxxbridge1$str$ptr + 2513480\nE           9   chromedriver                        0x0000000100d9dc98 cxxbridge1$str$ptr + 2327828\nE           10  chromedriver                        0x0000000100de7880 cxxbridge1$str$ptr + 2629884\nE           11  chromedriver                        0x0000000100de7a08 cxxbridge1$str$ptr + 2630276\nE           12  chromedriver                        0x0000000100df6e2c cxxbridge1$str$ptr + 2692776\nE           13  libsystem_pthread.dylib             0x0000000190ce02e4 _pthread_start + 136\nE           14  libsystem_pthread.dylib             0x0000000190cdb0fc thread_start + 8\n\n../../../.pyenv/versions/3.12.6/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:228: UnexpectedAlertPresentException"}, "start": 1740105758132, "stop": 1740105767364, "uuid": "89017210-f745-4923-9afb-34fcd259da41", "historyId": "935ff0d9b242544213ea39a00a41d1e9", "testCaseId": "935ff0d9b242544213ea39a00a41d1e9", "fullName": "maintest#test_login", "labels": [{"name": "suite", "value": "maintest"}, {"name": "host", "value": "novalrizkys-MacBook-Air.local"}, {"name": "thread", "value": "38331-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "maintest"}]}